
#[global_allocator]
static GLOBAL: mimalloc::MiMalloc = mimalloc::MiMalloc;
//static GLOBAL: jemallocator::Jemalloc = jemallocator::Jemalloc;

extern crate ndarray;
use ndarray::prelude::*;

#[no_mangle]
pub extern fn density_gradient(
                        point_ptr: *const f64,
                        nmo    : i64,
                        natm   : i64,
                        nprims : i64,
                        mgrp   : i64,
                        ngto_h : i64,
                        ngroup_ptr : *const i64,
                        ityp_ptr   : *const i64,
                        nzexp_ptr  : *const i64,
                        nlm_ptr    : *const i64,
                        nuexp_ptr  : *const i64,
                        occ_ptr    : *const f64,
                        oexp_ptr   : *const f64,
                        xyz_ptr    : *const f64,
                        rcutte_ptr : *const f64,
                        coef_ptr   : *const f64,
                        grad_ptr   : *mut   f64
                        ) {
    // input & output variables
    let point    = unsafe { ArrayView::from_shape_ptr(3, point_ptr) };
    let ngroup   = unsafe { ArrayView::from_shape_ptr(natm as usize, ngroup_ptr) };
    let ityp     = unsafe { ArrayView::from_shape_ptr(nprims as usize, ityp_ptr) };
    let nzexp    = unsafe { ArrayView::from_shape_ptr((natm as usize,mgrp as usize).f(), nzexp_ptr) };
    let nlm      = unsafe { ArrayView::from_shape_ptr((56,3).f(), nlm_ptr) };
    let nuexp    = unsafe { ArrayView::from_shape_ptr((natm as usize, mgrp as usize, ngto_h as usize).f(), nuexp_ptr) };
    let occ      = unsafe { ArrayView::from_shape_ptr(nmo as usize, occ_ptr) };
    let oexp     = unsafe { ArrayView::from_shape_ptr(nprims as usize, oexp_ptr) };
    let xyz      = unsafe { ArrayView::from_shape_ptr((natm as usize, 3).f(), xyz_ptr) };
    let rcutte   = unsafe { ArrayView::from_shape_ptr((natm as usize, mgrp as usize).f(), rcutte_ptr) };
    let coef     = unsafe { ArrayView::from_shape_ptr((2*nmo as usize, nprims as usize).f(), coef_ptr) };
    let mut grad = unsafe { ArrayViewMut::from_shape_ptr(3, grad_ptr) };
    // local variables
    let mut fun   = Array1::<f64>::zeros(3);
    let mut fun1  = Array1::<f64>::zeros(3);
    let mut xcoor = Array1::<f64>::zeros(3);
    let mut gun   = Array1::<f64>::zeros(nmo as usize);
    let mut gun1  = Array2::<f64>::zeros((nmo as usize, 3).f());
    let mut it    = Array1::<usize>::zeros(3);
    let mut k      : usize;
    let mut i      : usize;
    let mut itip   : usize;
    let mut n      : usize;
    let mut dis2   : f64;
    let mut ori    : f64;
    let mut dp2    : f64;
    let mut aexp   : f64;
    let mut x      : f64;
    let mut f12    : f64;
    let mut f123   : f64;
    let mut fa     : f64;
    let mut fb     : f64;
    let mut fc     : f64;
    let mut cfj    : f64;
    let mut fac    : f64;
    let mut facgun : f64;
    // output
    grad.fill(0.0);

    for ic in (0 as usize)..(natm as usize) {
        // Atomic coordinates of this center
        xcoor[0] = point[0] - xyz[[ic,0]];
        xcoor[1] = point[1] - xyz[[ic,1]];
        xcoor[2] = point[2] - xyz[[ic,2]];
        dis2 = xcoor.mapv(|a| a.powi(2)).sum();
        // Loop over different shells in this atom
        for m in (0 as usize)..(ngroup[ic] as usize) {
            k = (nuexp[[ic,m,0]]-1) as usize;
            // Skip to compute this primitive if distance is too big.
            if dis2 > (rcutte[[ic,m]]).powi(2) { continue };
            ori = -oexp[k];
            dp2 = 2.0*ori;
            // All primitives in a shell share the same exponent.
            aexp = (ori*dis2).exp();
            // Loop over the different primitives in this shell.
            for jj in (0 as usize)..(nzexp[[ic,m]] as usize) {
                // "i" is the original index of the primitive in the WFN.
                i = (nuexp[[ic,m,jj]]-1) as usize;
                itip = (ityp[i]-1) as usize;
                // Integer coeficients
                it[0] = nlm[[itip,0]] as usize;
                it[1] = nlm[[itip,1]] as usize;
                it[2] = nlm[[itip,2]] as usize;

                for j in (0 as usize)..(3 as usize) {
                    n = it[j] as usize;
                    x = xcoor[j];
                    if n == 0 {
                        fun1[j] = dp2 * x;
                        fun[j] = 1.0;
                    } else if n == 1 {
                        fun1[j] = 1.0 + dp2 * x * x;
                        fun[j] = x;
                    } else if n == 2 {
                        let x2 = x * x;
                        fun1[j] = x * (2.0 + dp2 * x2);
                        fun[j] = x2;
                    } else if n == 3 {
                        let x2 = x * x;
                        fun1[j] = x2 * (3.0 + dp2 * x2);
                        fun[j] = x * x2;
                    } else if n == 4 {
                        let x2 = x * x;
                        fun1[j] = x2 * x * (4.0 + dp2 * x2);
                        fun[j] = x2 * x2;
                    } else if n == 5 {
                        let x2 = x * x;
                        fun1[j] = x2 * x2 * (5.0 + dp2 * x2);
                        fun[j] = x2 * x2 * x;
                    }
                }
                f12 = fun[0] * fun[1] * aexp;
                f123 = f12 * fun[2];
                fa = fun1[0] * fun[1] * fun[2] * aexp;
                fb = fun1[1] * fun[0] * fun[2] * aexp;
                fc = fun1[2] * f12;

                // Run over orbitals
                for j in (0 as usize)..(nmo as usize) {
                    cfj = coef[[j,i]];
                    gun[j] += cfj * f123;
                    gun1[[j,0]] += cfj * fa;
                    gun1[[j,1]] += cfj * fb;
                    gun1[[j,2]] += cfj * fc;
                }
            }
        }
    }
    // Run again over orbitals
    for i in (0 as usize)..(nmo as usize) {
        fac = occ[i];
        facgun = fac * gun[i];
        for j in (0 as usize)..(3 as usize) {
            grad[j] += facgun * gun1[[i,j]];
        }
    }
    grad[0] *= 2.0;
    grad[1] *= 2.0;
    grad[2] *= 2.0;

}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_density_gradient() { // CH4 test

        let point = array![1.0,1.0,1.0];

        let nmo: i64    = 5;
        let natm: i64   = 5;
        let nprims: i64 = 93;
        let mgrp: i64   = 19;
        let ngto_h: i64 = 21;

        let ngroup = array![19, 9, 9, 9, 9];

        let ityp = array![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        5, 6, 7, 8, 9, 10, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 4, 1, 1, 1, 1,
        1, 1, 1, 2, 3, 4, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 4, 1, 1,
        1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 4];

        let nzexp = array![
                     1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1,
                     1, 3, 3, 3, 3,
                     1, 3, 3, 3, 3,
                     1, 0, 0, 0, 0,
                     1, 0, 0, 0, 0,
                     3, 0, 0, 0, 0,
                     3, 0, 0, 0, 0,
                     3, 0, 0, 0, 0,
                     3, 0, 0, 0, 0,
                     3, 0, 0, 0, 0,
                     3, 0, 0, 0, 0,
                     6, 0, 0, 0, 0,
                     6, 0, 0, 0, 0];

        let nlm = array![
 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 3, 0, 0, 2, 2, 0, 1, 1, 0, 1, 4, 0, 0, 3, 3, 1, 0, 1, 0, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5,
 0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0, 3, 0, 1, 0, 2, 2, 0, 1, 1, 0, 4, 0, 1, 0, 3, 3, 0, 1, 2, 0, 2, 1, 2, 1, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0,
 0, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 3, 0, 1, 1, 0, 2, 2, 1, 0, 0, 4, 0, 1, 0, 1, 3, 3, 0, 2, 2, 1, 1, 2, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 3, 2, 1, 0, 2, 1, 0, 1, 0, 0];

        let mut nuexp  = Array3::<i64>::zeros((ngto_h as usize, mgrp as usize, natm as usize));
        nuexp[[0, 0, 0]] = 1;
        nuexp[[0, 1, 0]] = 2;
        nuexp[[0, 2, 0]] = 3;
        nuexp[[0, 3, 0]] = 4;
        nuexp[[0, 4, 0]] = 5;
        nuexp[[0, 5, 0]] = 6;
        nuexp[[0, 6, 0]] = 7;
        nuexp[[0, 7, 0]] = 8;
        nuexp[[0, 8, 0]] = 9;
        nuexp[[0, 9, 0]] = 10;
        nuexp[[0, 10, 0]] = 11;
        nuexp[[0, 11, 0]] = 12;
        nuexp[[1, 11, 0]] = 13;
        nuexp[[2, 11, 0]] = 14;
        nuexp[[0, 12, 0]] = 15;
        nuexp[[1, 12, 0]] = 16;
        nuexp[[2, 12, 0]] = 17;
        nuexp[[0, 13, 0]] = 18;
        nuexp[[1, 13, 0]] = 19;
        nuexp[[2, 13, 0]] = 20;
        nuexp[[0, 14, 0]] = 21;
        nuexp[[1, 14, 0]] = 22;
        nuexp[[2, 14, 0]] = 23;
        nuexp[[0, 15, 0]] = 24;
        nuexp[[1, 15, 0]] = 25;
        nuexp[[2, 15, 0]] = 26;
        nuexp[[0, 16, 0]] = 27;
        nuexp[[1, 16, 0]] = 28;
        nuexp[[2, 16, 0]] = 29;
        nuexp[[0, 17, 0]] = 30;
        nuexp[[1, 17, 0]] = 31;
        nuexp[[2, 17, 0]] = 32;
        nuexp[[3, 17, 0]] = 33;
        nuexp[[4, 17, 0]] = 34;
        nuexp[[5, 17, 0]] = 35;
        nuexp[[0, 18, 0]] = 36;
        nuexp[[1, 18, 0]] = 37;
        nuexp[[2, 18, 0]] = 38;
        nuexp[[3, 18, 0]] = 39;
        nuexp[[4, 18, 0]] = 40;
        nuexp[[5, 18, 0]] = 41;
        nuexp[[0, 0, 1]] = 42;
        nuexp[[0, 1, 1]] = 43;
        nuexp[[0, 2, 1]] = 44;
        nuexp[[0, 3, 1]] = 45;
        nuexp[[0, 4, 1]] = 46;
        nuexp[[0, 5, 1]] = 47;
        nuexp[[0, 6, 1]] = 48;
        nuexp[[0, 7, 1]] = 49;
        nuexp[[1, 7, 1]] = 50;
        nuexp[[2, 7, 1]] = 51;
        nuexp[[0, 8, 1]] = 52;
        nuexp[[1, 8, 1]] = 53;
        nuexp[[2, 8, 1]] = 54;
        nuexp[[0, 0, 2]] = 55;
        nuexp[[0, 1, 2]] = 56;
        nuexp[[0, 2, 2]] = 57;
        nuexp[[0, 3, 2]] = 58;
        nuexp[[0, 4, 2]] = 59;
        nuexp[[0, 5, 2]] = 60;
        nuexp[[0, 6, 2]] = 61;
        nuexp[[0, 7, 2]] = 62;
        nuexp[[1, 7, 2]] = 63;
        nuexp[[2, 7, 2]] = 64;
        nuexp[[0, 8, 2]] = 65;
        nuexp[[1, 8, 2]] = 66;
        nuexp[[2, 8, 2]] = 67;
        nuexp[[0, 0, 3]] = 68;
        nuexp[[0, 1, 3]] = 69;
        nuexp[[0, 2, 3]] = 70;
        nuexp[[0, 3, 3]] = 71;
        nuexp[[0, 4, 3]] = 72;
        nuexp[[0, 5, 3]] = 73;
        nuexp[[0, 6, 3]] = 74;
        nuexp[[0, 7, 3]] = 75;
        nuexp[[1, 7, 3]] = 76;
        nuexp[[2, 7, 3]] = 77;
        nuexp[[0, 8, 3]] = 78;
        nuexp[[1, 8, 3]] = 79;
        nuexp[[2, 8, 3]] = 80;
        nuexp[[0, 0, 4]] = 81;
        nuexp[[0, 1, 4]] = 82;
        nuexp[[0, 2, 4]] = 83;
        nuexp[[0, 3, 4]] = 84;
        nuexp[[0, 4, 4]] = 85;
        nuexp[[0, 5, 4]] = 86;
        nuexp[[0, 6, 4]] = 87;
        nuexp[[0, 7, 4]] = 88;
        nuexp[[1, 7, 4]] = 89;
        nuexp[[2, 7, 4]] = 90;
        nuexp[[0, 8, 4]] = 91;
        nuexp[[1, 8, 4]] = 92;
        nuexp[[2, 8, 4]] = 93;

        let occ    = array![2.0, 2.0, 2.0, 2.0, 2.0];

        let oexp   = array![8846.1235, 2948.7078, 982.90261, 327.6342, 109.2114, 36.403801,
        12.1346, 4.0448667, 1.3482889, 0.44942964, 0.14980988, 37.294093, 37.294093, 37.294093,
        11.475106, 11.475106, 11.475106, 3.5308017, 3.5308017, 3.5308017, 1.0864005, 1.0864005,
        1.0864005, 0.33427709, 0.33427709, 0.33427709, 0.10285449, 0.10285449, 0.10285449, 0.4775,
        0.4775, 0.4775, 0.4775, 0.4775, 0.4775, 0.11998, 0.11998, 0.11998, 0.11998, 0.11998,
        0.11998, 282.95216, 87.062202, 26.78837, 8.2425753, 2.536177, 0.78036216, 0.24011143,
        0.8815, 0.8815, 0.8815, 0.179892, 0.179892, 0.179892, 282.95216, 87.062202, 26.78837,
        8.2425753, 2.536177, 0.78036216, 0.24011143, 0.8815, 0.8815, 0.8815, 0.179892, 0.179892,
        0.179892, 282.95216, 87.062202, 26.78837, 8.2425753, 2.536177, 0.78036216, 0.24011143,
        0.8815, 0.8815, 0.8815, 0.179892, 0.179892, 0.179892, 282.95216, 87.062202, 26.78837,
        8.2425753, 2.536177, 0.78036216, 0.24011143, 0.8815, 0.8815, 0.8815, 0.179892, 0.179892,
        0.179892];

        let xyz = array![ 0.0, -2.23958,  2.23958, -2.23958, 2.23958,
                          0.0, -2.23958, -2.23958,  2.23958, 2.23958,
                          0.0,  2.23958, -2.23958, -2.23958, 2.23958];

        let rcutte = array![
                          0.1,   0.4,   0.4,   0.4,   0.4,
                          0.2,   0.7,   0.7,   0.7,   0.7,
                          0.2,   1.2,   1.2,   1.2,   1.2,
                          0.4,   2.1,   2.1,   2.1,   2.1,
                          0.6,   3.7,   3.7,   3.7,   3.7,
                          1.0,   6.7,   6.7,   6.7,   6.7,
                          1.7,  12.0,  12.0,  12.0,  12.0,
                          3.0,   6.5,   6.5,   6.5,   6.5,
                          5.1,  14.4,  14.4,  14.4,  14.4,
                          8.8,   0.0,   0.0,   0.0,   0.0,
                         15.2,   0.0,   0.0,   0.0,   0.0,
                          1.0,   0.0,   0.0,   0.0,   0.0,
                          1.8,   0.0,   0.0,   0.0,   0.0,
                          3.2,   0.0,   0.0,   0.0,   0.0,
                          5.8,   0.0,   0.0,   0.0,   0.0,
                         10.6,   0.0,   0.0,   0.0,   0.0,
                         19.1,   0.0,   0.0,   0.0,   0.0,
                          9.1,   0.0,   0.0,   0.0,   0.0,
                         18.4,   0.0,   0.0,   0.0,   0.0];

        let coef = array![
 -0.34278786    ,   0.0718318674  ,   0.0          ,   0.0          ,   0.0          ,  -0.34278786    ,   0.0718318674  ,   0.0          ,   0.0          ,   0.0,
 -0.218473792   ,   0.045781611   ,   0.0          ,   0.0          ,   0.0          ,  -0.218473792   ,   0.045781611   ,   0.0          ,   0.0          ,   0.0,
 -0.504106972   ,   0.105636603   ,   0.0          ,   0.0          ,   0.0          ,  -0.504106972   ,   0.105636603   ,   0.0          ,   0.0          ,   0.0,
 -0.766098145   ,   0.160537367   ,   0.0          ,   0.0          ,   0.0          ,  -0.766098145   ,   0.160537367   ,   0.0          ,   0.0          ,   0.0,
 -1.28036416    ,   0.268302817   ,   0.0          ,   0.0          ,   0.0          ,  -1.28036416    ,   0.268302817   ,   0.0          ,   0.0          ,   0.0,
 -1.78929931    ,   0.374951174   ,   0.0          ,   0.0          ,   0.0          ,  -1.78929931    ,   0.374951174   ,   0.0          ,   0.0          ,   0.0,
 -1.93725627    ,   0.485985898   ,   0.0          ,   0.0          ,   0.0          ,  -1.93725627    ,   0.485985898   ,   0.0          ,   0.0          ,   0.0,
 -0.881977592   ,   0.370500981   ,   0.0          ,   0.0          ,   0.0          ,  -0.881977592   ,   0.370500981   ,   0.0          ,   0.0          ,   0.0,
 -0.0550425885  ,  -0.0317333125  ,   0.0          ,   0.0          ,   0.0          ,  -0.0550425885  ,  -0.0317333125  ,   0.0          ,   0.0          ,   0.0,
  0.000129674813,  -0.204548866   ,   0.0          ,   0.0          ,   0.0          ,   0.000129674813,  -0.204548866   ,   0.0          ,   0.0          ,   0.0,
  1.76895157e-5 ,  -0.080032736   ,   0.0          ,   0.0          ,   0.0          ,   1.76895157e-5 ,  -0.080032736   ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.259100209  ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.259100209,
  0.0           ,   0.0           ,   0.259100209  ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.259100209  ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.259100209  ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.259100209  ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.283237227  ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.283237227,
  0.0           ,   0.0           ,   0.283237227  ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.283237227  ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.283237227  ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.283237227  ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.325088209  ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.325088209,
  0.0           ,   0.0           ,   0.325088209  ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.325088209  ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.325088209  ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.325088209  ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.251102406  ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.251102406,
  0.0           ,   0.0           ,   0.251102406  ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.251102406  ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.251102406  ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.251102406  ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.0882360604 ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.0882360604,
  0.0           ,   0.0           ,   0.0882360604 ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0882360604 ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.0882360604 ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.0882360604 ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.0307360868 ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.0307360868,
  0.0           ,   0.0           ,   0.0307360868 ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0307360868 ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.0307360868 ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.0307360868 ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.0179595703 ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.0179595703 ,   0.0,
  0.0           ,   0.0           ,   0.0179595703 ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0179595703 ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.0179595703 ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.0179595703,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.0          ,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,  -0.00748198683,   0.0          ,   0.0           ,   0.0           ,   0.0          ,  -0.00748198683,   0.0,
  0.0           ,   0.0           ,   0.00748198683,   0.0          ,   0.0          ,   0.0           ,   0.0           ,   0.00748198683,   0.0          ,   0.0,
  0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.00748198683,   0.0           ,   0.0           ,   0.0          ,   0.0          ,  -0.00748198683,
 -3.60818593e-6 ,  -0.00245045953 ,  -0.00639068019,  -0.00639068019,   0.00639068019,  -3.60818593e-6 ,  -0.00245045953 ,  -0.00639068019,  -0.00639068019,   0.00639068019,
 -1.7679831e-6  ,  -0.00120070615 ,  -0.00313138368,  -0.00313138368,   0.00313138368,  -1.7679831e-6  ,  -0.00120070615 ,  -0.00313138368,  -0.00313138368,   0.00313138368,
 -8.82218426e-6 ,  -0.00599148878 ,  -0.0156255135 ,  -0.0156255135 ,   0.0156255135 ,  -8.82218426e-6 ,  -0.00599148878 ,  -0.0156255135 ,  -0.0156255135 ,   0.0156255135,
 -7.70951942e-6 ,  -0.00523583477 ,  -0.0136548044 ,  -0.0136548044 ,   0.0136548044 ,  -7.70951942e-6 ,  -0.00523583477 ,  -0.0136548044 ,  -0.0136548044 ,   0.0136548044,
 -2.43192289e-5 ,  -0.0165161351  ,  -0.0430732832 ,  -0.0430732832 ,   0.0430732832 ,  -2.43192289e-5 ,  -0.0165161351  ,  -0.0430732832 ,  -0.0430732832 ,   0.0430732832,
  8.18337188e-6 ,  -0.0134751561  ,  -0.0441596983 ,  -0.0441596983 ,   0.0441596983 ,   8.18337188e-6 ,  -0.0134751561  ,  -0.0441596983 ,  -0.0441596983 ,   0.0441596983,
 -5.06689845e-5 ,  -0.0182420411  ,  -0.0423311156 ,  -0.0423311156 ,   0.0423311156 ,  -5.06689845e-5 ,  -0.0182420411  ,  -0.0423311156 ,  -0.0423311156 ,   0.0423311156,
 -2.75508728e-5 ,  -0.00420955891 ,  -0.00643044829,  -0.00643044829,   0.00362684967,  -2.75508728e-5 ,  -0.00420955891 ,  -0.00643044829,  -0.00643044829,   0.00362684967,
 -2.75508728e-5 ,  -0.00420955891 ,  -0.00362684967,  -0.00643044829,   0.00643044829,  -2.75508728e-5 ,  -0.00420955891 ,  -0.00362684967,  -0.00643044829,   0.00643044829,
  2.75508728e-5 ,   0.00420955891 ,   0.00643044829,   0.00362684967,  -0.00643044829,   2.75508728e-5 ,   0.00420955891 ,   0.00643044829,   0.00362684967,  -0.00643044829,
 -9.05183688e-6 ,  -0.000403436392,   0.00387298874,   0.00387298874,  -0.00354728156,  -9.05183688e-6 ,  -0.000403436392,   0.00387298874,   0.00387298874,  -0.00354728156,
 -9.05183688e-6 ,  -0.000403436392,   0.00354728156,   0.00387298874,  -0.00387298874,  -9.05183688e-6 ,  -0.000403436392,   0.00354728156,   0.00387298874,  -0.00387298874,
  9.05183688e-6 ,   0.000403436392,  -0.00387298874,  -0.00354728156,   0.00387298874,   9.05183688e-6 ,   0.000403436392,  -0.00387298874,  -0.00354728156,   0.00387298874,
 -3.60818593e-6 ,  -0.00245045953 ,  -0.00639068019,   0.00639068019,  -0.00639068019,  -3.60818593e-6 ,  -0.00245045953 ,  -0.00639068019,   0.00639068019,  -0.00639068019,
 -1.7679831e-6  ,  -0.00120070615 ,  -0.00313138368,   0.00313138368,  -0.00313138368,  -1.7679831e-6  ,  -0.00120070615 ,  -0.00313138368,   0.00313138368,  -0.00313138368,
 -8.82218426e-6 ,  -0.00599148878 ,  -0.0156255135 ,   0.0156255135 ,  -0.0156255135 ,  -8.82218426e-6 ,  -0.00599148878 ,  -0.0156255135 ,   0.0156255135 ,  -0.0156255135,
 -7.70951942e-6 ,  -0.00523583477 ,  -0.0136548044 ,   0.0136548044 ,  -0.0136548044 ,  -7.70951942e-6 ,  -0.00523583477 ,  -0.0136548044 ,   0.0136548044 ,  -0.0136548044,
 -2.43192289e-5 ,  -0.0165161351  ,  -0.0430732832 ,   0.0430732832 ,  -0.0430732832 ,  -2.43192289e-5 ,  -0.0165161351  ,  -0.0430732832 ,   0.0430732832 ,  -0.0430732832,
  8.18337188e-6 ,  -0.0134751561  ,  -0.0441596983 ,   0.0441596983 ,  -0.0441596983 ,   8.18337188e-6 ,  -0.0134751561  ,  -0.0441596983 ,   0.0441596983 ,  -0.0441596983,
 -5.06689845e-5 ,  -0.0182420411  ,  -0.0423311156 ,   0.0423311156 ,  -0.0423311156 ,  -5.06689845e-5 ,  -0.0182420411  ,  -0.0423311156 ,   0.0423311156 ,  -0.0423311156,
  2.75508728e-5 ,   0.00420955891 ,   0.00643044829,  -0.00643044829,   0.00362684967,   2.75508728e-5 ,   0.00420955891 ,   0.00643044829,  -0.00643044829,   0.00362684967,
 -2.75508728e-5 ,  -0.00420955891 ,  -0.00362684967,   0.00643044829,  -0.00643044829,  -2.75508728e-5 ,  -0.00420955891 ,  -0.00362684967,   0.00643044829,  -0.00643044829,
 -2.75508728e-5 ,  -0.00420955891 ,  -0.00643044829,   0.00362684967,  -0.00643044829,  -2.75508728e-5 ,  -0.00420955891 ,  -0.00643044829,   0.00362684967,  -0.00643044829,
  9.05183688e-6 ,   0.000403436392,  -0.00387298874,   0.00387298874,  -0.00354728156,   9.05183688e-6 ,   0.000403436392,  -0.00387298874,   0.00387298874,  -0.00354728156,
 -9.05183688e-6 ,  -0.000403436392,   0.00354728156,  -0.00387298874,   0.00387298874,  -9.05183688e-6 ,  -0.000403436392,   0.00354728156,  -0.00387298874,   0.00387298874,
 -9.05183688e-6 ,  -0.000403436392,   0.00387298874,  -0.00354728156,   0.00387298874,  -9.05183688e-6 ,  -0.000403436392,   0.00387298874,  -0.00354728156,   0.00387298874,
 -3.60818593e-6 ,  -0.00245045953 ,   0.00639068019,   0.00639068019,   0.00639068019,  -3.60818593e-6 ,  -0.00245045953 ,   0.00639068019,   0.00639068019,   0.00639068019,
 -1.7679831e-6  ,  -0.00120070615 ,   0.00313138368,   0.00313138368,   0.00313138368,  -1.7679831e-6  ,  -0.00120070615 ,   0.00313138368,   0.00313138368,   0.00313138368,
 -8.82218426e-6 ,  -0.00599148878 ,   0.0156255135 ,   0.0156255135 ,   0.0156255135 ,  -8.82218426e-6 ,  -0.00599148878 ,   0.0156255135 ,   0.0156255135 ,   0.0156255135,
 -7.70951942e-6 ,  -0.00523583477 ,   0.0136548044 ,   0.0136548044 ,   0.0136548044 ,  -7.70951942e-6 ,  -0.00523583477 ,   0.0136548044 ,   0.0136548044 ,   0.0136548044,
 -2.43192289e-5 ,  -0.0165161351  ,   0.0430732832 ,   0.0430732832 ,   0.0430732832 ,  -2.43192289e-5 ,  -0.0165161351  ,   0.0430732832 ,   0.0430732832 ,   0.0430732832,
  8.18337188e-6 ,  -0.0134751561  ,   0.0441596983 ,   0.0441596983 ,   0.0441596983 ,   8.18337188e-6 ,  -0.0134751561  ,   0.0441596983 ,   0.0441596983 ,   0.0441596983,
 -5.06689845e-5 ,  -0.0182420411  ,   0.0423311156 ,   0.0423311156 ,   0.0423311156 ,  -5.06689845e-5 ,  -0.0182420411  ,   0.0423311156 ,   0.0423311156 ,   0.0423311156,
 -2.75508728e-5 ,  -0.00420955891 ,   0.00643044829,   0.00643044829,   0.00362684967,  -2.75508728e-5 ,  -0.00420955891 ,   0.00643044829,   0.00643044829,   0.00362684967,
  2.75508728e-5 ,   0.00420955891 ,  -0.00362684967,  -0.00643044829,  -0.00643044829,   2.75508728e-5 ,   0.00420955891 ,  -0.00362684967,  -0.00643044829,  -0.00643044829,
 -2.75508728e-5 ,  -0.00420955891 ,   0.00643044829,   0.00362684967,   0.00643044829,  -2.75508728e-5 ,  -0.00420955891 ,   0.00643044829,   0.00362684967,   0.00643044829,
 -9.05183688e-6 ,  -0.000403436392,  -0.00387298874,  -0.00387298874,  -0.00354728156,  -9.05183688e-6 ,  -0.000403436392,  -0.00387298874,  -0.00387298874,  -0.00354728156,
  9.05183688e-6 ,   0.000403436392,   0.00354728156,   0.00387298874,   0.00387298874,   9.05183688e-6 ,   0.000403436392,   0.00354728156,   0.00387298874,   0.00387298874,
 -9.05183688e-6 ,  -0.000403436392,  -0.00387298874,  -0.00354728156,  -0.00387298874,  -9.05183688e-6 ,  -0.000403436392,  -0.00387298874,  -0.00354728156,  -0.00387298874,
 -3.60818593e-6 ,  -0.00245045953 ,   0.00639068019,  -0.00639068019,  -0.00639068019,  -3.60818593e-6 ,  -0.00245045953 ,   0.00639068019,  -0.00639068019,  -0.00639068019,
 -1.7679831e-6  ,  -0.00120070615 ,   0.00313138368,  -0.00313138368,  -0.00313138368,  -1.7679831e-6  ,  -0.00120070615 ,   0.00313138368,  -0.00313138368,  -0.00313138368,
 -8.82218426e-6 ,  -0.00599148878 ,   0.0156255135 ,  -0.0156255135 ,  -0.0156255135 ,  -8.82218426e-6 ,  -0.00599148878 ,   0.0156255135 ,  -0.0156255135 ,  -0.0156255135,
 -7.70951942e-6 ,  -0.00523583477 ,   0.0136548044 ,  -0.0136548044 ,  -0.0136548044 ,  -7.70951942e-6 ,  -0.00523583477 ,   0.0136548044 ,  -0.0136548044 ,  -0.0136548044,
 -2.43192289e-5 ,  -0.0165161351  ,   0.0430732832 ,  -0.0430732832 ,  -0.0430732832 ,  -2.43192289e-5 ,  -0.0165161351  ,   0.0430732832 ,  -0.0430732832 ,  -0.0430732832,
  8.18337188e-6 ,  -0.0134751561  ,   0.0441596983 ,  -0.0441596983 ,  -0.0441596983 ,   8.18337188e-6 ,  -0.0134751561  ,   0.0441596983 ,  -0.0441596983 ,  -0.0441596983,
 -5.06689845e-5 ,  -0.0182420411  ,   0.0423311156 ,  -0.0423311156 ,  -0.0423311156 ,  -5.06689845e-5 ,  -0.0182420411  ,   0.0423311156 ,  -0.0423311156 ,  -0.0423311156,
  2.75508728e-5 ,   0.00420955891 ,  -0.00643044829,   0.00643044829,   0.00362684967,   2.75508728e-5 ,   0.00420955891 ,  -0.00643044829,   0.00643044829,   0.00362684967,
  2.75508728e-5 ,   0.00420955891 ,  -0.00362684967,   0.00643044829,   0.00643044829,   2.75508728e-5 ,   0.00420955891 ,  -0.00362684967,   0.00643044829,   0.00643044829,
  2.75508728e-5 ,   0.00420955891 ,  -0.00643044829,   0.00362684967,   0.00643044829,   2.75508728e-5 ,   0.00420955891 ,  -0.00643044829,   0.00362684967,   0.00643044829,
  9.05183688e-6 ,   0.000403436392,   0.00387298874,  -0.00387298874,  -0.00354728156,   9.05183688e-6 ,   0.000403436392,   0.00387298874,  -0.00387298874,  -0.00354728156,
  9.05183688e-6 ,   0.000403436392,   0.00354728156,  -0.00387298874,  -0.00387298874,   9.05183688e-6 ,   0.000403436392,   0.00354728156,  -0.00387298874,  -0.00387298874,
  9.05183688e-6 ,   0.000403436392,   0.00387298874,  -0.00354728156,  -0.00387298874,   9.05183688e-6 ,   0.000403436392,   0.00387298874,  -0.00354728156,  -0.00387298874];

        let mut grad = Array1::<f64>::zeros(3);

        density_gradient(point.as_ptr(),
                         nmo,
                         natm,
                         nprims,
                         mgrp,
                         ngto_h,
                         ngroup.as_ptr(),
                         ityp.as_ptr(),
                         nzexp.as_ptr(),
                         nlm.as_ptr(),
                         nuexp.as_ptr(),
                         occ.as_ptr(),
                         oexp.as_ptr(),
                         xyz.as_ptr(),
                         rcutte.as_ptr(),
                         coef.as_ptr(),
                         grad.as_mut_ptr()
                         );

        assert_eq!(&grad, array![-0.04168871296917581,
                                 -0.04168871296917581,
                                 -0.041688712969175805]);
    }
}
